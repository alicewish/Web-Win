#target photoshop// entry point/*** @@@BUILDINFO@@@ pngloader.jsx !Version 0.0.5 Tue Nov 07 2010 16:21:40 GMT+0300David Shulman*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////From LoadFiles into Stack .jsx CS4 veriosn///////////////////////////////////////////////////////////////////////////////////////////////// Put header files in a "Stack Scripts Only" folder.  The "...Only" tells// PS not to place it in the menu.  For that reason, we do -not- localize that// portion of the folder name.var g_StackScriptFolderPath = app.path + "/"+ localize("$$$/ScriptingSupport/InstalledScripts=Presets/Scripts") + "/"										+ localize("$$$/Private/LoadStack/StackScriptOnly=Stack Scripts Only/");$.evalFile(g_StackScriptFolderPath + "LatteUI.jsx");$.evalFile(g_StackScriptFolderPath + "StackSupport.jsx");$.evalFile(g_StackScriptFolderPath + "CreateImageStack.jsx");/************************************************************/// loadLayers routinesloadLayers = new ImageStackCreator( localize("$$$/AdobePlugin/Shared/LoadStack/Process/Name=Load Layers"),										  localize('$$$/AdobePlugin/Shared/LoadStack/Auto/untitled=Untitled' ) );// LoadLayers is less restrictive than MergeToHDRloadLayers.mustBeSameSize			= false;	// Images' height & width don't need to matchloadLayers.mustBeUnmodifiedRaw		= false;	// Exposure adjustements in Camera raw are allowedloadLayers.mustNotBe32Bit			= false;	// 32 bit imagesloadLayers.createSmartObject		= false;	// If true, option to create smart object is checked.// Add hooks to read the value of the "Create Smart Object" checkboxloadLayers.customDialogSetup = function( w ){		//alert("customDialogSetup 0");	w.findControl('_createSO').value = loadLayers.createSmartObject;	if (! app.featureEnabled( localize( "$$$/private/ExtendedImageStackCreation=ImageStack Creation" ) ))		w.findControl('_createSO').hide();}loadLayers.customDialogFunction = function( w ){	//alert("customDialogFunction 0");	loadLayers.createSmartObject = w.findControl('_createSO').value;}// Override the default to use "Auto" alignment.loadLayers.alignStack = function( stackDoc ){	selectAllLayers(stackDoc, 2);	alignLayersByContent( "Auto" );}loadLayers.stackLayers = function(){	var result, i, stackDoc = null;		stackDoc = this.loadStackLayers();	if (! stackDoc)		return;		// Nuke the "destination" layer that got created (M2HDR holdover)	stackDoc.layers[this.pluginName].remove();		// Stack 'em up.	if (this.createSmartObject)	{		selectAllLayers( stackDoc );		executeAction( knewPlacedLayerStr, new ActionDescriptor(), DialogModes.NO );	}}// "Main" execution of Merge to HDRloadLayers.doInteractiveLoad = function (){	//alert("doInteractiveLoad 0");	this.getFilesFromBridgeOrDialog( localize("$$$/Private/LoadStack/LoadLayersexv=LoadLayers.exv") );	if (this.stackElements)		this.stackLayers();}loadLayers.intoStack = function(filelist, alignFlag){      loadLayersFromScript = true;			if (typeof(alignFlag) == 'boolean')		loadLayers.useAlignment = alignFlag;			if (filelist.length < 2)	{		alert(localize("$$$/AdobeScripts/Shared/LoadLayers/AtLeast2=At least two files must be selected to create a stack."), this.pluginName, true );		return;	}	var j;	this.stackElements = new Array();	for (j in filelist)	{		var f = filelist[j];		this.stackElements.push( new StackElement( (typeof(f) == 'string') ? File(f) : f ) );	}			if (this.stackElements.length > 1)		this.stackLayers();}///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////From LoadFiles into Stack .jsx CS4 veriosn/ ends here ////////////////////////////////////////////////////////////////////////////////////////////////// actual call  doImagesIntoStack(TempFilesFolderName());function doImagesIntoStack( folderPath ){	//set this to true so we don't show the UI	var loadLayersFromScript = true;// Commented this call to remove 	//This allows us to call a function in 'Load Files into Stack.jsx' . The path needs to	//match the path on your machine. If you know that your script will be installed in	//the Photoshop folder in a particular location, you can work out the relative path	//var g_StackScriptFolderPath = app.path + "/"+ localize("$$$/ScriptingSupport/InstalledScripts=Presets/Scripts") ;//+ "/"											//+ localize("$$$/Private/LoadStack/StackScriptOnly=Stack Scripts Only/");												var folderPics = new Folder( folderPath );	//alert("files are in : " +folderPath );	var fileList = folderPics.getFiles('*.png')	//This is the alignFlag. Set this to true to have Photoshop attempt to align the	//individual images so that matching areas overlap. You probably want  to set	//this to false .	var alignFlag = false;			//alert("before calling  loadLayers.intoStack");	loadLayers.intoStack( fileList, alignFlag );		//alert('finished processing');    app.bringToFront();	    for (i=0;i < fileList.length;i++)    {        		var itmeFile  =  new File (fileList[i]);                if(itmeFile.remove())		{            //$.writeln(" removing OK" + itmeFile);			}        else		{            //$.writeln(" removing OK" + itmeFile);			}      }  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //alert("finished called doImagesIntoStack");var prefs = new Object();	prefs.countFrom     = 1;    // number to start counting from (default: 1)	prefs.zeroPadding   = 3;    // number of digits to use for the layer number (defaul: 3)	prefs.nameSeparator = ' ';  // character to insert between the layer name and number (default: ' ')	prefs.topToBottom   = false; // rename layers top to bottom (true) or bottom to top (false)	// prompt for layer name	prefs.layerPattern = "layer" ; //prompt('Enter the rename pattern to be used for all layers.\n' +	//'For example, enter "Layer" to rename layers as "Layer 01", "Layer 02", etc.', 'Layer Name');//alert(prefs);	// rename layers	if (prefs.layerPattern)	{		//alert("before  renameLayers");		renameLayers(activeDocument, prefs);	}   DocumetResize();   	if(folderPics.remove())	{        //$.writeln(" removing " + folderPics);		}else	{      //  $.writeln(" cannot remove " + folderPics);	}	}// folder name with temporary PNG files is stored in ~/temppics.txt , we have to read this and pass folder path to the main functionfunction TempFilesFolderName(){    var strfolderPath = "@@@";    var homeFolder =  new Folder("~");  //  $.writeln(homeFolder.fsName);    var  folderName  = new File(homeFolder.fsName + '/temppics.adob');   // $.writeln(folderName.fsName);        if(folderName.exists)    {        folderName.open ('r');        strfolderPath =  folderName.readln();      //  $.writeln(" function return : " + strfolderPath);   }  else  {    // $.writeln(" File " +  folderName.fullName +  " not found" ) ;  }//strfolderPath= '/Users/test/pics/';//alert(' temp pics are located ' +  strfolderPath);return strfolderPath;    }function PrintObjectReflectionProperties(objRef){    var  props = objRef.reflect.properties;	for (var i = 0; i < props.length; i++) 	{		//$.writeln(props[i].name + '  = '  + props[ props[i].name]);	}            }///////////////////////////////////////////////////////////////////////////////// renameLayers - rename layers, top to bottom, or bottom to top///////////////////////////////////////////////////////////////////////////////function renameLayers(ref, prefs) {	// declare local variables	var len = ref.layers.length;	// rename layers top to bottom	if (prefs.topToBottom) {		for (var i = 0; i < len; i++) {			rename();		}	}	// rename layers bottom to top	else {		for (var i = len - 1; i >= 0; i--) {			rename();		}	}	// rename - rename layer	function rename() {		var layer = ref.layers[i];		var vis = layer.visible;		// check for groups		if (layer.typename == 'LayerSet') {			renameLayers(layer, prefs);		}		// rename layer		else {			layer.name = prefs.layerPattern + prefs.nameSeparator +				(prefs.countFrom + Math.pow(10, prefs.zeroPadding)).toString().substr(1);			if (!vis) {				layer.visible = false;			}			prefs.countFrom++;		}	}}///////////////////////////////////////////////////////////////////////////////// isCorrectVersion - check for Adobe Photoshop CS (v8) or higher///////////////////////////////////////////////////////////////////////////////function isCorrectVersion() {	if (parseInt(version, 10) >= 8) {		return true;	}	else {		alert('This script requires Adobe Photoshop CS or higher.', 'Wrong Version', false);		return false;	}}///////////////////////////////////////////////////////////////////////////////// isOpenDocs - ensure at least one document is open///////////////////////////////////////////////////////////////////////////////function isOpenDocs() {	if (documents.length) {		return true;	}	else {		alert('There are no documents open.', 'No Documents Open', false);		return false;	}}///////////////////////////////////////////////////////////////////////////////// showError - display error message if something goes wrong///////////////////////////////////////////////////////////////////////////////function showError(err) {	if (confirm('An unknown error has occurred.\n' +		'Would you like to see more information?', true, 'Unknown Error')) {			alert(err + ': on line ' + err.line, 'Script Error', true);	}}function DocumetResize(){    var startRulerUnits = app.preferences.rulerUnits;     var startTypeUnits = app.preferences.typeUnits;    //alert (" app before : " +  startRulerUnits + "  " +  startTypeUnits);        var unitsStyle = 0;    var newHeight = 0; 	var newWidth =  0; 	var newResolution = 0;     /*  ( A4, 2100., 2970. ) );      ( A5, 1480., 2100. ) );      ( A6, 1050., 1480. ) );      ( A7, 740., 1050. ) );      ( Legal, 2160., 3560. ) );      ( JuniorLegal, 1270., 2030. ) );      (Letter, 2160., 2790. ) );   */    app.preferences.rulerUnits =  Units.INCHES;    app.preferences.typeUnits = TypeUnits.PIXELS;            doc = app.activeDocument; 	var fWidth = doc.width;	var fHeight = doc.height;	var res = doc.resolution;        //alert(" original doc widht  = " + fWidth + "  height = " + fHeight + "  resolution  " + doc.resolution);              fHeight = fHeight*res;     fWidth =  fWidth*res;         //alert("normalized doc size : " +  fHeight + "  " +  fWidth);    if(           (fWidth == 2100 && fHeight == 2970) ||  (fWidth == 2970 && fHeight == 2100) || (fWidth == 1480 && fHeight == 2100) || (fWidth == 2100 && fHeight == 1480) ||          (fWidth == 1480 && fHeight == 1050) || (fWidth == 1050 && fHeight == 1480) || (fWidth == 740 && fHeight == 1050) || (fWidth == 1050 && fHeight == 740)          )          {                unitsStyle  =  Units.CM;           }    else if (          (fWidth == 2160 && fHeight == 3560) || (fWidth == 3560 && fHeight == 2160) || (fWidth == 1270 && fHeight == 2030) || (fWidth == 2030 && fHeight == 1270) ||          (fWidth == 2160 && fHeight == 2790) || (fWidth == 2790 && fHeight == 2160)          )          {                unitsStyle = Units.INCHES;          }               //alert("  unitsStyle = " +  unitsStyle);     /*if ( unitsStyle == Units.CM)    {        app.preferences.rulerUnits =  Units.CM;        newResolution = 237;        newHeight = fHeight/100;         newWidth =  fWidth/100;      }    else if ( unitsStyle  ==  Units.INCHES)    {*/        app.preferences.rulerUnits =  Units.INCHES;        newResolution = 600;        newHeight = fHeight/254;         newWidth =  fWidth/254;      //}   //alert( " new H = " + newHeight+ " new W = " + newWidth + " new Res = " + newResolution + " Units style " + app.preferences.rulerUnits );       doc.resizeImage (newWidth, newHeight, newResolution);    // return original settings     app.preferences.rulerunits = startRulerUnits;	app.preferences.typeunits = startTypeUnits;	}